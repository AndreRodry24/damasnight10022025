export const aviso = async (c, mensagem) => {
    try {
        const chatId = mensagem.key.remoteJid; // ID do grupo
        const sender = mensagem.key.participant || mensagem.key.remoteJid; // Captura o remetente correto (caso o participante esteja dispon√≠vel)

        // Verificar se o remetente √© um administrador
        const groupMetadata = await c.groupMetadata(chatId);
        console.log('Metadados do grupo:', groupMetadata); // Log dos metadados do grupo

        const isAdmin = groupMetadata.participants.some(participant => participant.id === sender && (participant.admin === 'admin' || participant.admin === 'superadmin'));
        console.log(`Verifica√ß√£o de administrador - Remetente: ${sender}, √â administrador? ${isAdmin}`); // Log do status de administrador

        let textoMensagem = '';
        if (mensagem.message?.conversation) {
            textoMensagem = mensagem.message.conversation; // Mensagem enviada pelo usu√°rio
        } else if (mensagem.message?.extendedTextMessage) {
            textoMensagem = mensagem.message.extendedTextMessage.text; // Mensagem com texto (como links)
        }

        // Verificar se o texto cont√©m #aviso e se o remetente √© um administrador
        if (textoMensagem && textoMensagem.endsWith('#aviso') && isAdmin) {
            console.log('Comando #aviso detectado e autorizado para o administrador.');

            // Obter IDs de usu√°rios mencionados
            let idsUsuarios = [];
            let mensagemCitada = null;

            if (mensagem.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
                const usuarioRespondido = mensagem.message.extendedTextMessage.contextInfo.participant;
                mensagemCitada = mensagem.message.extendedTextMessage.contextInfo.stanzaId;

                if (usuarioRespondido) {
                    idsUsuarios = [usuarioRespondido]; // Mencionar apenas o autor da mensagem citada
                }
            }

            let mensagemAviso = '';
            if (idsUsuarios.length === 0) {
                mensagemAviso += `\n\nüö® *ùóîùòÉùó∂ùòÄùóº ùóúùó∫ùóΩùóºùóøùòÅùóÆùóªùòÅùó≤!* üö®\n`;
                mensagemAviso += `üëèüçª *DÔæëMÔæëS* üíÉüî• *DÔæë* *NIG”á‘µ*üíÉüé∂üçæüç∏\n\n`;
                mensagemAviso += `üö´ N√£o √© permitido o envio de *imagens de nudez* sem a visualiza√ß√£o √∫nica. üëé \n\n`;
                mensagemAviso += `‚ö†Ô∏è N√£o s√£o permitidos assuntos relacionados a *pol√≠tica* üó≥Ô∏è, *futebol* ‚öΩ ou *religi√£o* ‚õ™, para evitar conflitos desnecess√°rios. \n\n`;
                mensagemAviso += `üö∏ N√£o √© permitido compartilhar *fotos, figurinhas ou imagens de crian√ßas* üë∂‚ùå nem marcar *fotos √≠ntimas* com *imagens de crian√ßas* üîû. \n\n`;
                mensagemAviso += `‚ö†Ô∏è *Proibido generalizar e falar mal dos membros do grupo* soltando indiretas ou discuss√µes sobre assuntos privados. üí¨üí¢ Qualquer assunto pessoal deve ser resolvido no privado! ü§ùüí¨` ;
            } else {
                mensagemAviso += `${idsUsuarios.map(id => `@${id.split('@')[0]}`).join(', ')}`;
                mensagemAviso += `\n\nüö® *ùóîùòÉùó∂ùòÄùóº ùóúùó∫ùóΩùóºùóøùòÅùóÆùóªùòÅùó≤!* üö®\n`;
                mensagemAviso += `üëèüçª *DÔæëMÔæëS* üíÉüî• *DÔæë* *NIG”á‘µ*üíÉüé∂üçæüç∏\n\n`;
                mensagemAviso += `üö´ N√£o √© permitido o envio de *imagens de nudez* sem a visualiza√ß√£o √∫nica. üëé \n\n`;
                mensagemAviso += `‚ö†Ô∏è N√£o s√£o permitidos assuntos relacionados a *pol√≠tica* üó≥Ô∏è, *futebol* ‚öΩ ou *religi√£o* ‚õ™, para evitar conflitos desnecess√°rios. \n\n`;
                mensagemAviso += `üö∏ N√£o √© permitido compartilhar *fotos, figurinhas ou imagens de crian√ßas* üë∂‚ùå nem marcar *fotos √≠ntimas* com *imagens de crian√ßas* üîû. \n\n`;
                mensagemAviso += `‚ö†Ô∏è *Proibido generalizar e falar mal dos membros do grupo* soltando indiretas ou discuss√µes sobre assuntos privados. üí¨üí¢ Qualquer assunto pessoal deve ser resolvido no privado! ü§ùüí¨` ;
            }

            // Envia a mensagem de aviso mencionando o usu√°rio, se houver
            await c.sendMessage(chatId, {
                text: mensagemAviso,
                mentions: idsUsuarios.length > 0 ? idsUsuarios : [],
            });

            // Remove a mensagem mencionada (cita√ß√£o) se existir
            if (mensagemCitada) {
                try {
                    await c.sendMessage(chatId, {
                        delete: {
                            remoteJid: chatId,
                            fromMe: false,
                            id: mensagemCitada,
                            participant: idsUsuarios[0], // Autor da mensagem citada
                        },
                    });
                    console.log('Mensagem citada removida com sucesso.');
                } catch (error) {
                    console.error('Erro ao remover mensagem citada:', error);
                }
            }
        } else if (textoMensagem && textoMensagem.endsWith('#aviso')) {
            await c.sendMessage(chatId, {
                text: `@${sender.split('@')[0]}, voc√™ *N√ÉO TEM PERMISS√ÉO* para usar este comando.`,
                mentions: [sender],
            });
        }
    } catch (err) {
        console.log('Erro ao enviar aviso:', err);
    }
};
